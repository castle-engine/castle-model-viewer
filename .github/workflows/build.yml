# ----------------------------------------------------------------------------
# GitHub Actions workflow to build and package the project using Castle Game Engine.
# Details:
# - Builds and packages: creates release packages (zip,tar.gz)
#   for all interesting platforms.
#   Some of them use our self-hosted runners, some use Docker on GH-hosted runners.
# - Uploads the release packages as GitHub release of "snapshot" tag,
#   https://github.com/castle-engine/castle-model-viewer/releases/tag/snapshot
# - Updates the "snapshot" tag to point to the build commit.
# ----------------------------------------------------------------------------

name: Build

on:
  push:
  pull_request:
  repository_dispatch:
    types: [cge-docker-unstable-changed]

env:
  # To which GitHub release tag should we upload artifacts.
  # Can be "snapshot" or "vX.Y.Z" (latter when we make stable release).
  release_tag: snapshot
  #release_tag: vX.Y.Z

  # Which Castle Game Engine tag/branch to use for building.
  # This *should* be "snapshot", which is our latest CGE that passed automatic tests.
  # But for quick hotfix in exceptional situation, you may want to use "master"
  # or any other branch/tag.
  engine_tag: snapshot

defaults:
  run:
    shell: bash

jobs:
  build_docker:
    name: Build From Docker
    runs-on: ubuntu-latest

    # We could use a Docker container with cge-unstable, so it already contains
    # CGE (with build tool) set up. This way we know we only use CGE that
    # passed automatic tests, we have castle-engine on the PATH, and things are easy.
    #
    # Later: But to make engine_tag configurable, we instead get CGE from GitHub.
    #container: kambi/castle-engine-cloud-builds-tools:cge-unstable

    container: kambi/castle-engine-cloud-builds-tools:cge-none
    steps:
      - uses: actions/checkout@v5

      # Setup Castle Game Engine
      - name: Castle Game Engine - Env CASTLE_ENGINE_PATH
        run: echo "CASTLE_ENGINE_PATH=$GITHUB_WORKSPACE/castle-engine" >> $GITHUB_ENV
      - name: Castle Game Engine - Env PATH (non-Windows)
        run: echo "PATH=$PATH:$CASTLE_ENGINE_PATH/tools/build-tool/" >> $GITHUB_ENV
      - name: Castle Game Engine - Clone ${{ env.engine_tag }}
        run: git clone --depth 1 --single-branch --branch ${{ env.engine_tag }} https://github.com/castle-engine/castle-engine/
      - name: Castle Game Engine - Build
        run: cd $CASTLE_ENGINE_PATH/tools/build-tool/ && ./castle-engine_compile.sh

      # Package application:
      # - castle-model-converter first, it will be packaged in castle-model-viewer CastleEngineManifest.xml
      # - then build and package castle-model-viewer
      - name: Package Windows / x86_64
        run: |
          castle-engine compile --os=win64 --cpu=x86_64 --manifest-name=CastleEngineManifest.converter.xml
          castle-engine package --os=win64 --cpu=x86_64
      - name: Package Windows / i386
        run: |
          # We need "make clean" to be sure to remove previous build artifacts, e.g. castle-model-converter.exe
          make clean
          castle-engine compile --os=win32 --cpu=i386 --manifest-name=CastleEngineManifest.converter.xml
          castle-engine package --os=win32 --cpu=i386
      - name: Package Linux / x86_64
        run: |
          # We need "make clean" to be sure to remove previous build artifacts, e.g. castle-model-converter.exe
          make clean
          castle-engine compile --os=linux --cpu=x86_64 --manifest-name=CastleEngineManifest.converter.xml
          castle-engine package --os=linux --cpu=x86_64
      - name: Archive Artifacts
        uses: actions/upload-artifact@v5
        with:
          name: windows-linux-builds
          path: |
            *.zip
            *.tar.gz
          #if-no-files-found: error

  build_runner_native:
    name: Build on Native Runner (target OS/CPU = source OS/CPU)
    strategy:
      matrix:
        runner: [
          macos_x64
          # We use arm-runner for Raspberry Pi builds now, to not have costs of maintaining our own runners.
          # raspberry_pi_64,
          # raspberry_pi_32
        ]
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v5

      # Setup Castle Game Engine
      - name: Castle Game Engine - Env CASTLE_ENGINE_PATH
        run: echo "CASTLE_ENGINE_PATH=$GITHUB_WORKSPACE/castle-engine" >> $GITHUB_ENV
      - name: Castle Game Engine - Env PATH (non-Windows)
        run: echo "PATH=$PATH:$CASTLE_ENGINE_PATH/tools/build-tool/" >> $GITHUB_ENV
      - name: Castle Game Engine - Clone ${{ env.engine_tag }}
        run: git clone --depth 1 --single-branch --branch ${{ env.engine_tag }} https://github.com/castle-engine/castle-engine/
      - name: Castle Game Engine - Build
        run: cd $CASTLE_ENGINE_PATH/tools/build-tool/ && ./castle-engine_compile.sh

      # Package application
      - name: Package (non macOS)
        if: ${{ matrix.runner != 'macos_x64' }}
        run: |
          castle-engine compile --manifest-name=CastleEngineManifest.converter.xml
          castle-engine package
      - name: Package (macOS)
        if: ${{ matrix.runner == 'macos_x64' }}
        # Special order for macOS:
        # - First compile and package castle-model-viewer, it will be a bundle.
        # - Add 2nd exe "castle-model-converter" to the bundle.
        # - zip it manually
        # (TODO: we could add file to zip created by initial "package" instead?)
        run: |
          castle-engine compile --manifest-name=CastleEngineManifest.converter.xml
          castle-engine package --package-format=mac-app-bundle

          cp castle-model-converter castle-model-viewer.app/Contents/MacOS/
          VERSION=`castle-engine output version`
          ZIPNAME=castle-model-viewer-"${VERSION}"-darwin-x86_64.zip
          zip -r "${ZIPNAME}" castle-model-viewer.app/
          echo "Packed to ${ZIPNAME}"

      - name: Archive Artifacts
        uses: actions/upload-artifact@v5
        with:
          name: ${{ matrix.runner }}-build
          path: |
            *.zip
            *.tar.gz
          #if-no-files-found: error

  build_arm_runner:
    name: Build on ARM Runner (for Raspberry Pi)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [armv7l, aarch64]
        include:
        # Raspberry Pi 32-bit (Arm)
        - arch: armv7l
          cpu: cortex-a7
          base_image: raspios_lite:latest
        # Raspberry Pi 64-bit (Aarch64)
        - arch: aarch64
          cpu: cortex-a53
          base_image: raspios_lite_arm64:latest
    steps:
      - uses: actions/checkout@v5
      - uses: pguyot/arm-runner-action@v2
        with:
          base_image: ${{ matrix.base_image }}
          cpu: ${{ matrix.cpu }}
          shell: /bin/bash -eo pipefail
          image_additional_mb: 6000
          # Avoids the need for copy_artifact_path later.
          bind_mount_repository: true
          commands: |
            # Useful string to grep logs, because log of script execution is somewhat buried in the middle of pguyot/arm-runner-action log
            echo 'CGE script starts here'

            # Show system info
            uname -a

            # Install FPC and other Linux dependencies
            sudo apt-get update
            sudo apt-get --no-install-recommends -y install libgl-dev fpc git make unzip sed zip

            # Check versions (and availability) of our requirements early
            fpc -iV
            make --version
            sed --version

            # Setup Castle Game Engine
            ARM_RUNNER_WORKSPACE=`pwd`
            export "CASTLE_ENGINE_PATH=$ARM_RUNNER_WORKSPACE/castle-engine"
            export "PATH=$PATH:$CASTLE_ENGINE_PATH/tools/build-tool/"
            git clone --depth 1 --single-branch --branch ${{ env.engine_tag }} https://github.com/castle-engine/castle-engine/
            cd $CASTLE_ENGINE_PATH/tools/build-tool/
            ./castle-engine_compile.sh
            cd $ARM_RUNNER_WORKSPACE

            # Package application
            castle-engine compile --manifest-name=CastleEngineManifest.converter.xml
            castle-engine package

      - name: Archive Artifacts
        uses: actions/upload-artifact@v5
        with:
          name: raspberry-pi-${{ matrix.arch }}-build
          path: |
            *.zip
            *.tar.gz
          #if-no-files-found: error

  # Build also with Delphi, just to make sure it goes OK.
  # We don't build releases with Delphi, but wemake sure that if someone downloads
  # sources -- they can build with Delphi as well as with FPC.
  build_delphi:
    name: Build Using Delphi
    strategy:
      matrix:
        host-label: [
          delphi_10_2,
          delphi_12_2
        ]

    runs-on: ${{ matrix.host-label }}

    steps:
      - uses: actions/checkout@v5

      # Setup Castle Game Engine
      - name: Castle Game Engine - Env CASTLE_ENGINE_PATH
        run: echo "CASTLE_ENGINE_PATH=$GITHUB_WORKSPACE/castle-engine" >> $GITHUB_ENV
      - name: Castle Game Engine - Env PATH (Windows, with ;)
        run: echo "PATH=$PATH;$CASTLE_ENGINE_PATH/tools/build-tool/" >> $GITHUB_ENV
      - name: Castle Game Engine - Clone ${{ env.engine_tag }}
        run: git clone --depth 1 --single-branch --branch ${{ env.engine_tag }} https://github.com/castle-engine/castle-engine/
      - name: Castle Game Engine - Build
        run: cd $CASTLE_ENGINE_PATH/tools/build-tool/ && ./castle-engine_compile.sh

      - name: Delphi Build (Win32)
        run: castle-engine compile --compiler=delphi --os=win32 --cpu=i386
      - name: Delphi Build (Win64)
        run: castle-engine compile --compiler=delphi --os=win64 --cpu=x86_64

  release:
    name: Release
    runs-on: ubuntu-latest

    # Only upload release if all builds, on all runners, succeeded.
    #
    # Note that build_delphi is not strictly necessary as dependency here
    # (since it doesn't make any artifacts, it's just a test that compilation
    # goes OK) but we still want failure there to cause workflow failure,
    # so that we have to fix it.
    needs: [build_docker, build_runner_native, build_arm_runner, build_delphi]

    steps:
    - name: Download packaged releases
      uses: actions/download-artifact@v5
      with:
        merge-multiple: true
    - name: List downloaded files
      run: ls -R
    - name: GH CLI status
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh auth status
    # Releases files in the GitHub release.
    - name: Release Artifacts
      if: ${{ github.ref == 'refs/heads/master' }}
      run: gh release --repo ${{ github.repository }} upload ${{ env.release_tag }} --clobber *.zip *.tar.gz
      env:
        GH_TOKEN: ${{ github.token }}

  update-release-tag:
    name: Update Release Tag (make release tag point to the build commit on master branch)
    runs-on: ubuntu-latest
    needs: [release]
    steps:
    - uses: actions/checkout@v5
    - name: Update Release Tag
      if: ${{ github.ref == 'refs/heads/master' }}
      run: |
        # --force allows to overwrite previous tag
        git tag --force ${{ env.release_tag }}
        # --force allows to push with overwritten tag
        git push --force origin ${{ env.release_tag }}
