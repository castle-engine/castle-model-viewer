'\" t
.\"     Title: castle-model-converter
.\"    Author: Michalis Kamburelis
.\" Generator: Asciidoctor 2.0.22
.\"      Date: 2024-05-15
.\"    Manual: castle-model-converter
.\"    Source: castle-model-converter
.\"  Language: English
.\"
.TH "CASTLE\-MODEL\-CONVERTER" "1" "2024-05-15" "castle\-model\-converter" "castle\-model\-converter"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
castle-model-converter \- converter for various 3D and 2D model formats
.SH "SYNOPSIS"
.sp
\fBcastle\-model\-converter\fP [\fIOPTION\fP]... \fIINPUT\-FILE\fP [\fIOUTPUT\-FILE\fP]
.SH "FEATURES"
.sp
As \fBinput\fP, we support all 3D and 2D model formats supported by Castle Game Engine: glTF, X3D, VRML, Spine JSON, sprite sheets (in Castle Game Engine, Cocos2D and Starling XML formats), MD3, Wavefront OBJ, 3DS, STL, Collada, and more.
.sp
As \fBoutput\fP, we support X3D or VRML. You can basically convert any input format to X3D. You can also convert between X3D classic and X3D XML encodings (in both directions) and you can convert (upgrade) from VRML 2.0 to X3D.
.sp
We can also validate the input model, without doing any conversion.
.SH "USAGE"
.sp
Call with these parameters:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 1." 4.2
.\}
The input filename. It can be any filename, URL or \f(CR\-\fP (to mean \fIstandard input\fP).
.sp
Required.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 2." 4.2
.\}
The output filename. It can be any filename, URL or \f(CR\-\fP (to mean \fIstandard output\fP).
.sp
This parameter is optional. If not provided, the output is written to the \fIstandard output\fP (so it is equivalent to using \f(CR\-\fP as the output filename), unless \f(CR\-\-validate\fP is used (then the output is not written anywhere).
.RE
.SH "EXAMPLES"
.sp
.if n .RS 4
.nf
.fam C
# Convert glTF to X3D
castle\-model\-converter input.gltf output.x3d

# Validate some glTF and X3D files
castle\-model\-converter \-\-validate input.gltf
castle\-model\-converter \-\-validate input.x3d

# Convert file from X3D classic encoding to X3D XML encoding
castle\-model\-converter input.x3dv output.x3d

# Convert file from X3D XML encoding to X3D classic encoding
castle\-model\-converter input.x3d output.x3dv

# Convert VRML 2.0 to X3D in classic encoding.
castle\-model\-converter input.wrl output.x3dv

# Convert standard input to standard output
castle\-model\-converter \- \- < input.x3dv > output.x3dv
castle\-model\-converter \- \-\-stdin\-url=fakeurl.gltf \- < input.gltf > output.x3dv
.fam
.fi
.if n .RE
.SH "ALL COMMAND\-LINE OPTIONS"
.sp
\fB\-\-validate\fP
.RS 4
Only validate the input model, don\(cqt do any conversion. Will exit with non\-zero status if the input is not 100% valid. Even warnings (that are ignorable during normal conversion) cause non\-zero exit status when validating.
.if n .sp
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
.B Note
.ps -1
.br
.sp
Our \fI"validation"\fP isn\(cqt 100% complete, that is: passing the validation doesn\(cqt guarantee that your model satisfies every detail of the specification of given format. We check for a lot of model issues (including, but not limited to, issues that would make it impossible to render this model using \fICastle Game Engine\fP). But it\(cqs not a complete validation of the model per every detail of the specification.
.sp .5v
.RE
.RE
.sp
\fB\-\-no\-x3d\-extensions\fP
.RS 4
Do not use Castle Game Engine extensions. This will output file valid in all X3D browsers (but maybe with some \fICastle Game Engine\fP\-specific features missing).
.RE
.sp
\fB\-\-enable\-downloads\fP
.RS 4
Enable (blocking) downloads from the net, e.g. to download a texture or inlined (using X3D \f(CRInline\fP node) models referenced by htt(s) protocol.
.RE
.sp
\fB\-\-stdin\-url=URL\fP
.RS 4
If input URL is \f(CR\-\fP, then we read file contents from the standard input. In this case, you can use this option to provide a \fIfake\fP URL for the input. We will use it to resolve relative URLs inside the input (e.g. to glTF binary blobs, textures or X3D inlines) and to determine the input file type. Default is \f(CRstdin.x3dv\fP in current directory, so we assume input is X3D (classic encoding), and resolve URLs with respect to the current directory.
.RE
.sp
\fB\-\-stdout\-url=URL\fP
.RS 4
If output URL is \f(CR\-\fP, then we write file contents to the standard output. In this case, you can use this option to provide a \fIfake\fP URL for the output. We will use it to determine the output file type. Default is \f(CRstdout.x3dv\fP in current directory, so we make output in X3D (classic encoding).
.RE
.sp
\fB\-\-float\-precision=DIGITS\fP
.RS 4
Number of digits after the decimal point when writing floating\-point numbers. Default is to write all possibly relevant digits. Specify any value >= 0 to use this number of digits.
.RE
.sp
\fB\-h / \-\-help\fP
.RS 4
Print the help message and exit.
.RE
.sp
\fB\-v / \-\-version\fP
.RS 4
Print the version number and exit.
.RE
.SS "Deprecated"
.sp
\fB\-\-encoding=classic|xml\fP
.RS 4
\fBDeprecated\fP. Use given X3D encoding on output. By default, we use \fIclassic\fP encoding (suitable for X3D files with \f(CR.x3dv\fP extensions).
.sp
Deprecated, do not use this. The 2nd parameter should determine the output type, ".x3d" extension says to make X3D XML, ".x3dv" says to make X3D classic. Or use \f(CR\-\-stdout\-url\fP to provide fake URL in case output is to stdout.
.RE
.SH "RESOURCES"
.sp
\fBProject web site:\fP \c
.URL "https://castle\-engine.io/castle\-model\-converter" "" ""
.sp
\fBUsing Castle Game Engine:\fP \c
.URL "https://castle\-engine.io/" "" ""
.SH "SEE ALSO"
.sp
\fBcastle\-model\-viewer(1)\fP
.SH "AUTHOR"
.sp
Michalis Kamburelis